name: C++ CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-analyze:
    name: Build and Analyze on ${{ matrix.os }} with ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        compiler: [gcc, clang]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          if [ "${{ matrix.compiler }}" == "gcc" ]; then
            sudo apt-get install -y build-essential cppcheck clang-tidy
          else
            sudo apt-get install -y clang cppcheck clang-tidy
          fi
        shell: bash

      - name: Configure and Build on Ubuntu
        if: runner.os == 'Linux'
        run: |
          mkdir build
          cd build
          if [ "${{ matrix.compiler }}" == "gcc" ]; then
            cmake -DCMAKE_CXX_COMPILER=g++ ..
          else
            cmake -DCMAKE_CXX_COMPILER=clang++ ..
          fi
          cmake --build .
        shell: bash

      - name: Run cppcheck on Ubuntu
        if: runner.os == 'Linux'
        run: |
          cppcheck --enable=all --inconclusive --error-exitcode=1 --suppress=missingIncludeSystem .
        shell: bash

      - name: Run clang-tidy on Ubuntu
        if: runner.os == 'Linux'
        run: |
          find . -iname '*.cpp' | xargs clang-tidy -checks='*' --
        shell: bash

      - name: Set up on Windows
        if: runner.os == 'Windows'
        run: |
          choco install -y mingw
          choco install -y llvm
          choco install -y cppcheck
        shell: powershell

      - name: Configure and Build on Windows
        if: runner.os == 'Windows'
        run: |
          mkdir build
          cd build
          if (${{ matrix.compiler }} -eq 'gcc') {
            cmake -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER=g++ ..
          } else {
            cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_CXX_COMPILER=clang-cl ..
          }
          cmake --build . --config Release
        shell: powershell

      - name: Run cppcheck on Windows
        if: runner.os == 'Windows'
        run: |
          cppcheck --enable=all --inconclusive --error-exitcode=1 --suppress=missingIncludeSystem .
        shell: powershell

      # Note: Clang-Tidy on Windows may require additional configuration